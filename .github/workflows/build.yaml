name: build

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*.*'
      - 'snapshot-*'
  pull_request:
    branches:
      - '*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - run: python -m pip install meson ninja
      - run: meson -Dbuildtype=release -Dstatic=prebuilt -Dignore_updates=false -Dinstall_check=true build
      - id: get_type # the meson invocation above is needed for this step to figure out the name of the release
        run: python ./.github/get-type.py ${{ github.ref }}
      - id: create_release
        if: steps.get_type.outputs.TYPE != 'dev'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.get_type.outputs.NAME }}
          draft: true
          prerelease: false
      - run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt
  build:
    runs-on: ${{ matrix.os }}
    needs: [release]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform_short: lin
          - os: macos-latest
            platform_short: mac
          - os: windows-latest
            platform_short: win
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release_url
      - id: get_release_info
        if: steps.get_type.outputs.TYPE != 'dev'
        run: bash -c "./.github/get-release-info.sh" ## gg github, this is terrible
      - if: matrix.os == 'macos-latest'
        run: brew install pkg-config
      - uses: actions/setup-python@v2
      - run: python -m pip install meson ninja
      - run: bash -c 'PLATFORM_SHORT=${{ matrix.platform_short }} ./.github/build.sh'
      - id: get_type
        run: python ./.github/get-type.py ${{ github.ref }}
      - uses: actions/upload-release-asset@v1
        if: steps.get_type.outputs.TYPE != 'dev'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: powder.zip
          asset_name: powder-${{ steps.get_type.outputs.NAME }}-${{ matrix.platform_short }}64.zip
          asset_content_type: application/zip
      - uses: actions/upload-artifact@v2
        if: steps.get_type.outputs.TYPE == 'dev'
        with:
          path: powder.zip
          name: powder-${{ steps.get_type.outputs.NAME }}-${{ matrix.platform_short }}64.zip
